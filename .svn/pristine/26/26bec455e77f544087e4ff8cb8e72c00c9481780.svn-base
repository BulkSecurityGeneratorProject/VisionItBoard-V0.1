package fr.visionitgroup.board.web.rest;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.IntegrationTest;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import java.math.BigDecimal;
import java.util.List;

import fr.visionitgroup.board.Application;
import fr.visionitgroup.board.domain.Collaborateur;
import fr.visionitgroup.board.repository.CollaborateurRepository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the CollaborateurResource REST controller.
 *
 * @see CollaborateurResource
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = Application.class)
@WebAppConfiguration
@IntegrationTest
public class CollaborateurResourceTest {


    private static final Integer DEFAULT_NUM_ENR = 0;
    private static final Integer UPDATED_NUM_ENR = 1;

    private static final Integer DEFAULT_IDMOB_RESS = 0;
    private static final Integer UPDATED_IDMOB_RESS = 1;
    private static final String DEFAULT_NOM = "SAMPLE_TEXT";
    private static final String UPDATED_NOM = "UPDATED_TEXT";
    private static final String DEFAULT_PRENOM = "SAMPLE_TEXT";
    private static final String UPDATED_PRENOM = "UPDATED_TEXT";
    private static final String DEFAULT_POLE = "SAMPLE_TEXT";
    private static final String UPDATED_POLE = "UPDATED_TEXT";
    private static final String DEFAULT_BUSINESS_UNIT = "SAMPLE_TEXT";
    private static final String UPDATED_BUSINESS_UNIT = "UPDATED_TEXT";
    private static final String DEFAULT_DATE_DISPO = "SAMPLE_TEXT";
    private static final String UPDATED_DATE_DISPO = "UPDATED_TEXT";

    private static final Integer DEFAULT_NB_JOURS = 0;
    private static final Integer UPDATED_NB_JOURS = 1;

    private static final BigDecimal DEFAULT_TJM = BigDecimal.ZERO;
    private static final BigDecimal UPDATED_TJM = BigDecimal.ONE;
    private static final String DEFAULT_FONCTION_RESS = "SAMPLE_TEXT";
    private static final String UPDATED_FONCTION_RESS = "UPDATED_TEXT";
    private static final String DEFAULT_DATE_ENTREE = "SAMPLE_TEXT";
    private static final String UPDATED_DATE_ENTREE = "UPDATED_TEXT";
    private static final String DEFAULT_DATE_SORTIE = "SAMPLE_TEXT";
    private static final String UPDATED_DATE_SORTIE = "UPDATED_TEXT";
    private static final String DEFAULT_OBSERVATIONS = "SAMPLE_TEXT";
    private static final String UPDATED_OBSERVATIONS = "UPDATED_TEXT";

    private static final Integer DEFAULT_ID_DOSSIER = 0;
    private static final Integer UPDATED_ID_DOSSIER = 1;
    private static final String DEFAULT_TEL_PERSO = "SAMPLE_TEXT";
    private static final String UPDATED_TEL_PERSO = "UPDATED_TEXT";
    private static final String DEFAULT_TEL_CLIENT = "SAMPLE_TEXT";
    private static final String UPDATED_TEL_CLIENT = "UPDATED_TEXT";
    private static final String DEFAULT_MAIL_VISION = "SAMPLE_TEXT";
    private static final String UPDATED_MAIL_VISION = "UPDATED_TEXT";
    private static final String DEFAULT_MISSION = "SAMPLE_TEXT";
    private static final String UPDATED_MISSION = "UPDATED_TEXT";

    @Inject
    private CollaborateurRepository collaborateurRepository;

    private MockMvc restCollaborateurMockMvc;

    private Collaborateur collaborateur;

    @PostConstruct
    public void setup() {
        MockitoAnnotations.initMocks(this);
        CollaborateurResource collaborateurResource = new CollaborateurResource();
        ReflectionTestUtils.setField(collaborateurResource, "collaborateurRepository", collaborateurRepository);
        this.restCollaborateurMockMvc = MockMvcBuilders.standaloneSetup(collaborateurResource).build();
    }

    @Before
    public void initTest() {
        collaborateur = new Collaborateur();
        collaborateur.setNum_enr(DEFAULT_NUM_ENR);
        collaborateur.setIdmob_ress(DEFAULT_IDMOB_RESS);
        collaborateur.setNom(DEFAULT_NOM);
        collaborateur.setPrenom(DEFAULT_PRENOM);
        collaborateur.setPole(DEFAULT_POLE);
        collaborateur.setBusiness_unit(DEFAULT_BUSINESS_UNIT);
        collaborateur.setDate_dispo(DEFAULT_DATE_DISPO);
        collaborateur.setNb_jours(DEFAULT_NB_JOURS);
        collaborateur.setTjm(DEFAULT_TJM);
        collaborateur.setFonction_ress(DEFAULT_FONCTION_RESS);
        collaborateur.setDate_entree(DEFAULT_DATE_ENTREE);
        collaborateur.setDate_sortie(DEFAULT_DATE_SORTIE);
        collaborateur.setObservations(DEFAULT_OBSERVATIONS);
        collaborateur.setId_dossier(DEFAULT_ID_DOSSIER);
        collaborateur.setTel_perso(DEFAULT_TEL_PERSO);
        collaborateur.setTel_client(DEFAULT_TEL_CLIENT);
        collaborateur.setMail_vision(DEFAULT_MAIL_VISION);
        collaborateur.setMission(DEFAULT_MISSION);
    }

    @Test
    @Transactional
    public void createCollaborateur() throws Exception {
        // Validate the database is empty
        assertThat(collaborateurRepository.findAll()).hasSize(0);

        // Create the Collaborateur
        restCollaborateurMockMvc.perform(post("/api/collaborateurs")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(collaborateur)))
                .andExpect(status().isOk());

        // Validate the Collaborateur in the database
        List<Collaborateur> collaborateurs = collaborateurRepository.findAll();
        assertThat(collaborateurs).hasSize(1);
        Collaborateur testCollaborateur = collaborateurs.iterator().next();
        assertThat(testCollaborateur.getNum_enr()).isEqualTo(DEFAULT_NUM_ENR);
        assertThat(testCollaborateur.getIdmob_ress()).isEqualTo(DEFAULT_IDMOB_RESS);
        assertThat(testCollaborateur.getNom()).isEqualTo(DEFAULT_NOM);
        assertThat(testCollaborateur.getPrenom()).isEqualTo(DEFAULT_PRENOM);
        assertThat(testCollaborateur.getPole()).isEqualTo(DEFAULT_POLE);
        assertThat(testCollaborateur.getBusiness_unit()).isEqualTo(DEFAULT_BUSINESS_UNIT);
        assertThat(testCollaborateur.getDate_dispo()).isEqualTo(DEFAULT_DATE_DISPO);
        assertThat(testCollaborateur.getNb_jours()).isEqualTo(DEFAULT_NB_JOURS);
        assertThat(testCollaborateur.getTjm()).isEqualTo(DEFAULT_TJM);
        assertThat(testCollaborateur.getFonction_ress()).isEqualTo(DEFAULT_FONCTION_RESS);
        assertThat(testCollaborateur.getDate_entree()).isEqualTo(DEFAULT_DATE_ENTREE);
        assertThat(testCollaborateur.getDate_sortie()).isEqualTo(DEFAULT_DATE_SORTIE);
        assertThat(testCollaborateur.getObservations()).isEqualTo(DEFAULT_OBSERVATIONS);
        assertThat(testCollaborateur.getId_dossier()).isEqualTo(DEFAULT_ID_DOSSIER);
        assertThat(testCollaborateur.getTel_perso()).isEqualTo(DEFAULT_TEL_PERSO);
        assertThat(testCollaborateur.getTel_client()).isEqualTo(DEFAULT_TEL_CLIENT);
        assertThat(testCollaborateur.getMail_vision()).isEqualTo(DEFAULT_MAIL_VISION);
        assertThat(testCollaborateur.getMission()).isEqualTo(DEFAULT_MISSION);
    }

    @Test
    @Transactional
    public void getAllCollaborateurs() throws Exception {
        // Initialize the database
        collaborateurRepository.saveAndFlush(collaborateur);

        // Get all the collaborateurs
        restCollaborateurMockMvc.perform(get("/api/collaborateurs"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.[0].id").value(collaborateur.getId().intValue()))
                .andExpect(jsonPath("$.[0].num_enr").value(DEFAULT_NUM_ENR))
                .andExpect(jsonPath("$.[0].idmob_ress").value(DEFAULT_IDMOB_RESS))
                .andExpect(jsonPath("$.[0].nom").value(DEFAULT_NOM.toString()))
                .andExpect(jsonPath("$.[0].prenom").value(DEFAULT_PRENOM.toString()))
                .andExpect(jsonPath("$.[0].pole").value(DEFAULT_POLE.toString()))
                .andExpect(jsonPath("$.[0].business_unit").value(DEFAULT_BUSINESS_UNIT.toString()))
                .andExpect(jsonPath("$.[0].date_dispo").value(DEFAULT_DATE_DISPO.toString()))
                .andExpect(jsonPath("$.[0].nb_jours").value(DEFAULT_NB_JOURS))
                .andExpect(jsonPath("$.[0].tjm").value(DEFAULT_TJM.intValue()))
                .andExpect(jsonPath("$.[0].fonction_ress").value(DEFAULT_FONCTION_RESS.toString()))
                .andExpect(jsonPath("$.[0].date_entree").value(DEFAULT_DATE_ENTREE.toString()))
                .andExpect(jsonPath("$.[0].date_sortie").value(DEFAULT_DATE_SORTIE.toString()))
                .andExpect(jsonPath("$.[0].observations").value(DEFAULT_OBSERVATIONS.toString()))
                .andExpect(jsonPath("$.[0].id_dossier").value(DEFAULT_ID_DOSSIER))
                .andExpect(jsonPath("$.[0].tel_perso").value(DEFAULT_TEL_PERSO.toString()))
                .andExpect(jsonPath("$.[0].tel_client").value(DEFAULT_TEL_CLIENT.toString()))
                .andExpect(jsonPath("$.[0].mail_vision").value(DEFAULT_MAIL_VISION.toString()))
                .andExpect(jsonPath("$.[0].mission").value(DEFAULT_MISSION.toString()));
    }

    @Test
    @Transactional
    public void getCollaborateur() throws Exception {
        // Initialize the database
        collaborateurRepository.saveAndFlush(collaborateur);

        // Get the collaborateur
        restCollaborateurMockMvc.perform(get("/api/collaborateurs/{id}", collaborateur.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$.id").value(collaborateur.getId().intValue()))
            .andExpect(jsonPath("$.num_enr").value(DEFAULT_NUM_ENR))
            .andExpect(jsonPath("$.idmob_ress").value(DEFAULT_IDMOB_RESS))
            .andExpect(jsonPath("$.nom").value(DEFAULT_NOM.toString()))
            .andExpect(jsonPath("$.prenom").value(DEFAULT_PRENOM.toString()))
            .andExpect(jsonPath("$.pole").value(DEFAULT_POLE.toString()))
            .andExpect(jsonPath("$.business_unit").value(DEFAULT_BUSINESS_UNIT.toString()))
            .andExpect(jsonPath("$.date_dispo").value(DEFAULT_DATE_DISPO.toString()))
            .andExpect(jsonPath("$.nb_jours").value(DEFAULT_NB_JOURS))
            .andExpect(jsonPath("$.tjm").value(DEFAULT_TJM.intValue()))
            .andExpect(jsonPath("$.fonction_ress").value(DEFAULT_FONCTION_RESS.toString()))
            .andExpect(jsonPath("$.date_entree").value(DEFAULT_DATE_ENTREE.toString()))
            .andExpect(jsonPath("$.date_sortie").value(DEFAULT_DATE_SORTIE.toString()))
            .andExpect(jsonPath("$.observations").value(DEFAULT_OBSERVATIONS.toString()))
            .andExpect(jsonPath("$.id_dossier").value(DEFAULT_ID_DOSSIER))
            .andExpect(jsonPath("$.tel_perso").value(DEFAULT_TEL_PERSO.toString()))
            .andExpect(jsonPath("$.tel_client").value(DEFAULT_TEL_CLIENT.toString()))
            .andExpect(jsonPath("$.mail_vision").value(DEFAULT_MAIL_VISION.toString()))
            .andExpect(jsonPath("$.mission").value(DEFAULT_MISSION.toString()));
    }

    @Test
    @Transactional
    public void getNonExistingCollaborateur() throws Exception {
        // Get the collaborateur
        restCollaborateurMockMvc.perform(get("/api/collaborateurs/{id}", 1L))
                .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateCollaborateur() throws Exception {
        // Initialize the database
        collaborateurRepository.saveAndFlush(collaborateur);

        // Update the collaborateur
        collaborateur.setNum_enr(UPDATED_NUM_ENR);
        collaborateur.setIdmob_ress(UPDATED_IDMOB_RESS);
        collaborateur.setNom(UPDATED_NOM);
        collaborateur.setPrenom(UPDATED_PRENOM);
        collaborateur.setPole(UPDATED_POLE);
        collaborateur.setBusiness_unit(UPDATED_BUSINESS_UNIT);
        collaborateur.setDate_dispo(UPDATED_DATE_DISPO);
        collaborateur.setNb_jours(UPDATED_NB_JOURS);
        collaborateur.setTjm(UPDATED_TJM);
        collaborateur.setFonction_ress(UPDATED_FONCTION_RESS);
        collaborateur.setDate_entree(UPDATED_DATE_ENTREE);
        collaborateur.setDate_sortie(UPDATED_DATE_SORTIE);
        collaborateur.setObservations(UPDATED_OBSERVATIONS);
        collaborateur.setId_dossier(UPDATED_ID_DOSSIER);
        collaborateur.setTel_perso(UPDATED_TEL_PERSO);
        collaborateur.setTel_client(UPDATED_TEL_CLIENT);
        collaborateur.setMail_vision(UPDATED_MAIL_VISION);
        collaborateur.setMission(UPDATED_MISSION);
        restCollaborateurMockMvc.perform(post("/api/collaborateurs")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(collaborateur)))
                .andExpect(status().isOk());

        // Validate the Collaborateur in the database
        List<Collaborateur> collaborateurs = collaborateurRepository.findAll();
        assertThat(collaborateurs).hasSize(1);
        Collaborateur testCollaborateur = collaborateurs.iterator().next();
        assertThat(testCollaborateur.getNum_enr()).isEqualTo(UPDATED_NUM_ENR);
        assertThat(testCollaborateur.getIdmob_ress()).isEqualTo(UPDATED_IDMOB_RESS);
        assertThat(testCollaborateur.getNom()).isEqualTo(UPDATED_NOM);
        assertThat(testCollaborateur.getPrenom()).isEqualTo(UPDATED_PRENOM);
        assertThat(testCollaborateur.getPole()).isEqualTo(UPDATED_POLE);
        assertThat(testCollaborateur.getBusiness_unit()).isEqualTo(UPDATED_BUSINESS_UNIT);
        assertThat(testCollaborateur.getDate_dispo()).isEqualTo(UPDATED_DATE_DISPO);
        assertThat(testCollaborateur.getNb_jours()).isEqualTo(UPDATED_NB_JOURS);
        assertThat(testCollaborateur.getTjm()).isEqualTo(UPDATED_TJM);
        assertThat(testCollaborateur.getFonction_ress()).isEqualTo(UPDATED_FONCTION_RESS);
        assertThat(testCollaborateur.getDate_entree()).isEqualTo(UPDATED_DATE_ENTREE);
        assertThat(testCollaborateur.getDate_sortie()).isEqualTo(UPDATED_DATE_SORTIE);
        assertThat(testCollaborateur.getObservations()).isEqualTo(UPDATED_OBSERVATIONS);
        assertThat(testCollaborateur.getId_dossier()).isEqualTo(UPDATED_ID_DOSSIER);
        assertThat(testCollaborateur.getTel_perso()).isEqualTo(UPDATED_TEL_PERSO);
        assertThat(testCollaborateur.getTel_client()).isEqualTo(UPDATED_TEL_CLIENT);
        assertThat(testCollaborateur.getMail_vision()).isEqualTo(UPDATED_MAIL_VISION);
        assertThat(testCollaborateur.getMission()).isEqualTo(UPDATED_MISSION);
    }

    @Test
    @Transactional
    public void deleteCollaborateur() throws Exception {
        // Initialize the database
        collaborateurRepository.saveAndFlush(collaborateur);

        // Get the collaborateur
        restCollaborateurMockMvc.perform(delete("/api/collaborateurs/{id}", collaborateur.getId())
                .accept(TestUtil.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk());

        // Validate the database is empty
        List<Collaborateur> collaborateurs = collaborateurRepository.findAll();
        assertThat(collaborateurs).hasSize(0);
    }
}
