package fr.visionitgroup.board.web.rest;

import com.codahale.metrics.annotation.Timed;
import fr.visionitgroup.board.domain.Collaborateur;
import fr.visionitgroup.board.repository.CollaborateurRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * REST controller for managing Collaborateur.
 */
@RestController
@RequestMapping("/api")
public class CollaborateurResource {

    private final Logger log = LoggerFactory.getLogger(CollaborateurResource.class);

    @Inject
    private CollaborateurRepository collaborateurRepository;

    /**
     * POST  /collaborateurs -> Create a new collaborateur.
     */
    @RequestMapping(value = "/collaborateurs",
            method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public void create(@RequestBody Collaborateur collaborateur) {
        log.debug("REST request to save Collaborateur : {}", collaborateur);
        collaborateurRepository.save(collaborateur);
    }

    /**
     * GET  /collaborateurs -> get all the collaborateurs.
     */
    @RequestMapping(value = "/collaborateurs",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public List<Collaborateur> getAll() {
        log.debug("REST request to get all Collaborateurs");
        return collaborateurRepository.findAll();
    }

    /**
     * GET  /collaborateurs/:id -> get the "id" collaborateur.
     */
    @RequestMapping(value = "/collaborateurs/{id}",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Collaborateur> get(@PathVariable Long id, HttpServletResponse response) {
        log.debug("REST request to get Collaborateur : {}", id);
        Collaborateur collaborateur = collaborateurRepository.findOne(id);
        if (collaborateur == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(collaborateur, HttpStatus.OK);
    }

    /**
     * DELETE  /collaborateurs/:id -> delete the "id" collaborateur.
     */
    @RequestMapping(value = "/collaborateurs/{id}",
            method = RequestMethod.DELETE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public void delete(@PathVariable Long id) {
        log.debug("REST request to delete Collaborateur : {}", id);
        collaborateurRepository.delete(id);
    }
}
